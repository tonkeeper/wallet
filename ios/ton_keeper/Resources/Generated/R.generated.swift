//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `SplashScreen`.
    static let splashScreen = _R.storyboard.splashScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SplashScreen", bundle: ...)`
    static func splashScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splashScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperAssociatedDomains {
      static let applinksAppTonkeeperCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:app.tonkeeper.com") ?? "applinks:app.tonkeeper.com"
      static let applinksAppTonkeeperOrg = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:app.tonkeeper.org") ?? "applinks:app.tonkeeper.org"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 20 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Montserrat-Black.ttf`.
    static let montserratBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Black", pathExtension: "ttf")
    /// Resource file `Montserrat-BlackItalic.ttf`.
    static let montserratBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-BlackItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Bold.ttf`.
    static let montserratBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Bold", pathExtension: "ttf")
    /// Resource file `Montserrat-BoldItalic.ttf`.
    static let montserratBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-BoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraBold.ttf`.
    static let montserratExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraBold", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraBoldItalic.ttf`.
    static let montserratExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraLight.ttf`.
    static let montserratExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraLight", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraLightItalic.ttf`.
    static let montserratExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Italic.ttf`.
    static let montserratItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Italic", pathExtension: "ttf")
    /// Resource file `Montserrat-Light.ttf`.
    static let montserratLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Light", pathExtension: "ttf")
    /// Resource file `Montserrat-LightItalic.ttf`.
    static let montserratLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-LightItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Medium.ttf`.
    static let montserratMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Medium", pathExtension: "ttf")
    /// Resource file `Montserrat-MediumItalic.ttf`.
    static let montserratMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-MediumItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Regular.ttf`.
    static let montserratRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Regular", pathExtension: "ttf")
    /// Resource file `Montserrat-SemiBold.ttf`.
    static let montserratSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-SemiBold", pathExtension: "ttf")
    /// Resource file `Montserrat-SemiBoldItalic.ttf`.
    static let montserratSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Thin.ttf`.
    static let montserratThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Thin", pathExtension: "ttf")
    /// Resource file `Montserrat-ThinItalic.ttf`.
    static let montserratThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ThinItalic", pathExtension: "ttf")
    /// Resource file `Podfile.properties.json`.
    static let podfilePropertiesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile.properties", pathExtension: "json")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Black", withExtension: "ttf")`
    static func montserratBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-BlackItalic", withExtension: "ttf")`
    static func montserratBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Bold", withExtension: "ttf")`
    static func montserratBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-BoldItalic", withExtension: "ttf")`
    static func montserratBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraBold", withExtension: "ttf")`
    static func montserratExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraBoldItalic", withExtension: "ttf")`
    static func montserratExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraLight", withExtension: "ttf")`
    static func montserratExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraLightItalic", withExtension: "ttf")`
    static func montserratExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Italic", withExtension: "ttf")`
    static func montserratItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Light", withExtension: "ttf")`
    static func montserratLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-LightItalic", withExtension: "ttf")`
    static func montserratLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Medium", withExtension: "ttf")`
    static func montserratMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-MediumItalic", withExtension: "ttf")`
    static func montserratMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Regular", withExtension: "ttf")`
    static func montserratRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-SemiBold", withExtension: "ttf")`
    static func montserratSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-SemiBoldItalic", withExtension: "ttf")`
    static func montserratSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Thin", withExtension: "ttf")`
    static func montserratThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ThinItalic", withExtension: "ttf")`
    static func montserratThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Podfile.properties", withExtension: "json")`
    static func podfilePropertiesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfilePropertiesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-BlackItalic`.
    static let montserratBlackItalic = Rswift.FontResource(fontName: "Montserrat-BlackItalic")
    /// Font `Montserrat-Black`.
    static let montserratBlack = Rswift.FontResource(fontName: "Montserrat-Black")
    /// Font `Montserrat-BoldItalic`.
    static let montserratBoldItalic = Rswift.FontResource(fontName: "Montserrat-BoldItalic")
    /// Font `Montserrat-Bold`.
    static let montserratBold = Rswift.FontResource(fontName: "Montserrat-Bold")
    /// Font `Montserrat-ExtraBoldItalic`.
    static let montserratExtraBoldItalic = Rswift.FontResource(fontName: "Montserrat-ExtraBoldItalic")
    /// Font `Montserrat-ExtraBold`.
    static let montserratExtraBold = Rswift.FontResource(fontName: "Montserrat-ExtraBold")
    /// Font `Montserrat-ExtraLightItalic`.
    static let montserratExtraLightItalic = Rswift.FontResource(fontName: "Montserrat-ExtraLightItalic")
    /// Font `Montserrat-ExtraLight`.
    static let montserratExtraLight = Rswift.FontResource(fontName: "Montserrat-ExtraLight")
    /// Font `Montserrat-Italic`.
    static let montserratItalic = Rswift.FontResource(fontName: "Montserrat-Italic")
    /// Font `Montserrat-LightItalic`.
    static let montserratLightItalic = Rswift.FontResource(fontName: "Montserrat-LightItalic")
    /// Font `Montserrat-Light`.
    static let montserratLight = Rswift.FontResource(fontName: "Montserrat-Light")
    /// Font `Montserrat-MediumItalic`.
    static let montserratMediumItalic = Rswift.FontResource(fontName: "Montserrat-MediumItalic")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    /// Font `Montserrat-SemiBoldItalic`.
    static let montserratSemiBoldItalic = Rswift.FontResource(fontName: "Montserrat-SemiBoldItalic")
    /// Font `Montserrat-SemiBold`.
    static let montserratSemiBold = Rswift.FontResource(fontName: "Montserrat-SemiBold")
    /// Font `Montserrat-ThinItalic`.
    static let montserratThinItalic = Rswift.FontResource(fontName: "Montserrat-ThinItalic")
    /// Font `Montserrat-Thin`.
    static let montserratThin = Rswift.FontResource(fontName: "Montserrat-Thin")

    /// `UIFont(name: "Montserrat-Black", size: ...)`
    static func montserratBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBlack, size: size)
    }

    /// `UIFont(name: "Montserrat-BlackItalic", size: ...)`
    static func montserratBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBlackItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Bold", size: ...)`
    static func montserratBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBold, size: size)
    }

    /// `UIFont(name: "Montserrat-BoldItalic", size: ...)`
    static func montserratBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraBold", size: ...)`
    static func montserratExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraBold, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraBoldItalic", size: ...)`
    static func montserratExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraLight", size: ...)`
    static func montserratExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraLight, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraLightItalic", size: ...)`
    static func montserratExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Italic", size: ...)`
    static func montserratItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Light", size: ...)`
    static func montserratLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLight, size: size)
    }

    /// `UIFont(name: "Montserrat-LightItalic", size: ...)`
    static func montserratLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLightItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }

    /// `UIFont(name: "Montserrat-MediumItalic", size: ...)`
    static func montserratMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMediumItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }

    /// `UIFont(name: "Montserrat-SemiBold", size: ...)`
    static func montserratSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBold, size: size)
    }

    /// `UIFont(name: "Montserrat-SemiBoldItalic", size: ...)`
    static func montserratSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Thin", size: ...)`
    static func montserratThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratThin, size: size)
    }

    /// `UIFont(name: "Montserrat-ThinItalic", size: ...)`
    static func montserratThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.montserratBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Black' could not be loaded, is 'Montserrat-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-BlackItalic' could not be loaded, is 'Montserrat-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Bold' could not be loaded, is 'Montserrat-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-BoldItalic' could not be loaded, is 'Montserrat-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraBold' could not be loaded, is 'Montserrat-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraBoldItalic' could not be loaded, is 'Montserrat-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraLight' could not be loaded, is 'Montserrat-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraLightItalic' could not be loaded, is 'Montserrat-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Italic' could not be loaded, is 'Montserrat-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Light' could not be loaded, is 'Montserrat-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-LightItalic' could not be loaded, is 'Montserrat-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'Montserrat-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-MediumItalic' could not be loaded, is 'Montserrat-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'Montserrat-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBold' could not be loaded, is 'Montserrat-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBoldItalic' could not be loaded, is 'Montserrat-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Thin' could not be loaded, is 'Montserrat-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ThinItalic' could not be loaded, is 'Montserrat-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `SplashScreenBackground`.
    static let splashScreenBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashScreenBackground")
    /// Image `SplashScreen`.
    static let splashScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashScreen")
    /// Image `passcode.delete`.
    static let passcodeDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "passcode.delete")
    /// Image `passcode.faceid`.
    static let passcodeFaceid = Rswift.ImageResource(bundle: R.hostingBundle, name: "passcode.faceid")
    /// Image `passcode.touchid`.
    static let passcodeTouchid = Rswift.ImageResource(bundle: R.hostingBundle, name: "passcode.touchid")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashScreen", bundle: ..., traitCollection: ...)`
    static func splashScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SplashScreenBackground", bundle: ..., traitCollection: ...)`
    static func splashScreenBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreenBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passcode.delete", bundle: ..., traitCollection: ...)`
    static func passcodeDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passcodeDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passcode.faceid", bundle: ..., traitCollection: ...)`
    static func passcodeFaceid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passcodeFaceid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passcode.touchid", bundle: ..., traitCollection: ...)`
    static func passcodeTouchid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passcodeTouchid, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.passCode` struct is generated, and contains static references to 4 localization keys.
    struct passCode {
      /// en translation: %#@number@
      ///
      /// Locales: en, ru
      static let tryAfter = Rswift.StringResource(key: "tryAfter", tableName: "PassCode", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Attempts remaining: %@
      ///
      /// Locales: en, ru
      static let attemptsRemaining = Rswift.StringResource(key: "attempts.remaining", tableName: "PassCode", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter passcode
      ///
      /// Locales: en, ru
      static let enter = Rswift.StringResource(key: "enter", tableName: "PassCode", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, ru
      static let logout = Rswift.StringResource(key: "logout", tableName: "PassCode", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: %#@number@
      ///
      /// Locales: en, ru
      static func tryAfter(number value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("tryAfter", tableName: "PassCode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "PassCode", preferredLanguages: preferredLanguages) else {
          return "tryAfter"
        }

        let format = NSLocalizedString("tryAfter", tableName: "PassCode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Attempts remaining: %@
      ///
      /// Locales: en, ru
      static func attemptsRemaining(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("attempts.remaining", tableName: "PassCode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "PassCode", preferredLanguages: preferredLanguages) else {
          return "attempts.remaining"
        }

        let format = NSLocalizedString("attempts.remaining", tableName: "PassCode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Enter passcode
      ///
      /// Locales: en, ru
      static func enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter", tableName: "PassCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PassCode", preferredLanguages: preferredLanguages) else {
          return "enter"
        }

        return NSLocalizedString("enter", tableName: "PassCode", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, ru
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", tableName: "PassCode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "PassCode", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", tableName: "PassCode", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try splashScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct splashScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "SplashScreen"
      let splashScreenViewController = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "SplashScreenViewController")

      func splashScreenViewController(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashScreenViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "SplashScreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashScreen' is used in storyboard 'SplashScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SplashScreenBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashScreenBackground' is used in storyboard 'SplashScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splashScreen().splashScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashScreenViewController' could not be loaded from storyboard 'SplashScreen' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}

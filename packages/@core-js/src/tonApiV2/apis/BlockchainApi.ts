/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Block,
  Config,
  GetBlockDefaultResponse,
  MethodExecutionResult,
  RawAccount,
  SendMessageRequest,
  Transaction,
  Transactions,
  Validators,
} from '../models/index';
import {
    BlockFromJSON,
    BlockToJSON,
    ConfigFromJSON,
    ConfigToJSON,
    GetBlockDefaultResponseFromJSON,
    GetBlockDefaultResponseToJSON,
    MethodExecutionResultFromJSON,
    MethodExecutionResultToJSON,
    RawAccountFromJSON,
    RawAccountToJSON,
    SendMessageRequestFromJSON,
    SendMessageRequestToJSON,
    TransactionFromJSON,
    TransactionToJSON,
    TransactionsFromJSON,
    TransactionsToJSON,
    ValidatorsFromJSON,
    ValidatorsToJSON,
} from '../models/index';

export interface ExecGetMethodRequest {
    accountId: string;
    methodName: string;
    args?: Array<string>;
}

export interface GetAccountTransactionsRequest {
    accountId: string;
    afterLt?: number;
    beforeLt?: number;
    limit?: number;
}

export interface GetBlockRequest {
    blockId: string;
}

export interface GetBlockTransactionsRequest {
    blockId: string;
}

export interface GetRawAccountRequest {
    accountId: string;
}

export interface GetTransactionRequest {
    transactionId: string;
}

export interface GetTransactionByMessageHashRequest {
    msgId: string;
}

export interface SendMessageOperationRequest {
    sendMessageRequest: SendMessageRequest;
}

/**
 * BlockchainApi - interface
 * 
 * @export
 * @interface BlockchainApiInterface
 */
export interface BlockchainApiInterface {
    /**
     * Execute get method for account
     * @param {string} accountId account ID
     * @param {string} methodName contract get method name
     * @param {Array<string>} [args] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    execGetMethodRaw(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodExecutionResult>>;

    /**
     * Execute get method for account
     */
    execGetMethod(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodExecutionResult>;

    /**
     * Get account transactions
     * @param {string} accountId account ID
     * @param {number} [afterLt] omit this parameter to get last transactions
     * @param {number} [beforeLt] omit this parameter to get last transactions
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getAccountTransactionsRaw(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>>;

    /**
     * Get account transactions
     */
    getAccountTransactions(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions>;

    /**
     * Get block data
     * @param {string} blockId block ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;

    /**
     * Get block data
     */
    getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;

    /**
     * Get transactions from block
     * @param {string} blockId block ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getBlockTransactionsRaw(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>>;

    /**
     * Get transactions from block
     */
    getBlockTransactions(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions>;

    /**
     * Get blockchain config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Config>>;

    /**
     * Get blockchain config
     */
    getConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Config>;

    /**
     * Get last known masterchain block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getMasterchainHeadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;

    /**
     * Get last known masterchain block
     */
    getMasterchainHead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;

    /**
     * Get low-level information about an account taken directly from the blockchain.
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getRawAccountRaw(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawAccount>>;

    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    getRawAccount(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawAccount>;

    /**
     * Get transaction data
     * @param {string} transactionId transaction ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * Get transaction data
     */
    getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * Get transaction data by message hash
     * @param {string} msgId message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getTransactionByMessageHashRaw(requestParameters: GetTransactionByMessageHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * Get transaction data by message hash
     */
    getTransactionByMessageHash(requestParameters: GetTransactionByMessageHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * Get validators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getValidatorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Validators>>;

    /**
     * Get validators
     */
    getValidators(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Validators>;

    /**
     * Send message to blockchain
     * @param {SendMessageRequest} sendMessageRequest bag-of-cells serialized to base64
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send message to blockchain
     */
    sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class BlockchainApi extends runtime.BaseAPI implements BlockchainApiInterface {

    /**
     * Execute get method for account
     */
    async execGetMethodRaw(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodExecutionResult>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling execGetMethod.');
        }

        if (requestParameters.methodName === null || requestParameters.methodName === undefined) {
            throw new runtime.RequiredError('methodName','Required parameter requestParameters.methodName was null or undefined when calling execGetMethod.');
        }

        const queryParameters: any = {};

        if (requestParameters.args) {
            queryParameters['args'] = requestParameters.args;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/accounts/{account_id}/methods/{method_name}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"method_name"}}`, encodeURIComponent(String(requestParameters.methodName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MethodExecutionResultFromJSON(jsonValue));
    }

    /**
     * Execute get method for account
     */
    async execGetMethod(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodExecutionResult> {
        const response = await this.execGetMethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get account transactions
     */
    async getAccountTransactionsRaw(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.afterLt !== undefined) {
            queryParameters['after_lt'] = requestParameters.afterLt;
        }

        if (requestParameters.beforeLt !== undefined) {
            queryParameters['before_lt'] = requestParameters.beforeLt;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/accounts/{account_id}/transactions`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsFromJSON(jsonValue));
    }

    /**
     * Get account transactions
     */
    async getAccountTransactions(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions> {
        const response = await this.getAccountTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get block data
     */
    async getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getBlock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * Get block data
     */
    async getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.getBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transactions from block
     */
    async getBlockTransactionsRaw(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getBlockTransactions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/blocks/{block_id}/transactions`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsFromJSON(jsonValue));
    }

    /**
     * Get transactions from block
     */
    async getBlockTransactions(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions> {
        const response = await this.getBlockTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get blockchain config
     */
    async getConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Config>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigFromJSON(jsonValue));
    }

    /**
     * Get blockchain config
     */
    async getConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Config> {
        const response = await this.getConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get last known masterchain block
     */
    async getMasterchainHeadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/masterchain-head`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * Get last known masterchain block
     */
    async getMasterchainHead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.getMasterchainHeadRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    async getRawAccountRaw(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getRawAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RawAccountFromJSON(jsonValue));
    }

    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    async getRawAccount(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawAccount> {
        const response = await this.getRawAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transaction data
     */
    async getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling getTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/transactions/{transaction_id}`.replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Get transaction data
     */
    async getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.getTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transaction data by message hash
     */
    async getTransactionByMessageHashRaw(requestParameters: GetTransactionByMessageHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.msgId === null || requestParameters.msgId === undefined) {
            throw new runtime.RequiredError('msgId','Required parameter requestParameters.msgId was null or undefined when calling getTransactionByMessageHash.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/messages/{msg_id}/transaction`.replace(`{${"msg_id"}}`, encodeURIComponent(String(requestParameters.msgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Get transaction data by message hash
     */
    async getTransactionByMessageHash(requestParameters: GetTransactionByMessageHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.getTransactionByMessageHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get validators
     */
    async getValidatorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Validators>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/blockchain/validators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorsFromJSON(jsonValue));
    }

    /**
     * Get validators
     */
    async getValidators(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Validators> {
        const response = await this.getValidatorsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Send message to blockchain
     */
    async sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sendMessageRequest === null || requestParameters.sendMessageRequest === undefined) {
            throw new runtime.RequiredError('sendMessageRequest','Required parameter requestParameters.sendMessageRequest was null or undefined when calling sendMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/blockchain/message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestToJSON(requestParameters.sendMessageRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send message to blockchain
     */
    async sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendMessageRaw(requestParameters, initOverrides);
    }

}

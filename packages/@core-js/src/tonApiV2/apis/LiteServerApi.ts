/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAccountStateLiteServer200Response,
  GetAllShardsInfoLiteServer200Response,
  GetBlockDefaultResponse,
  GetBlockHeaderLiteServer200Response,
  GetBlockLiteServer200Response,
  GetBlockProofLiteServer200Response,
  GetConfigAllLiteServer200Response,
  GetListBlockTransactionsLiteServer200Response,
  GetMasterchainInfoExtLiteServer200Response,
  GetMasterchainInfoLiteServer200Response,
  GetShardBlockProofLiteServer200Response,
  GetShardInfoLiteServer200Response,
  GetStateLiteServer200Response,
  GetTimeLiteServer200Response,
  GetTransactionsLiteServer200Response,
  SendMessageLiteServer200Response,
  SendMessageLiteServerRequest,
} from '../models/index';
import {
    GetAccountStateLiteServer200ResponseFromJSON,
    GetAccountStateLiteServer200ResponseToJSON,
    GetAllShardsInfoLiteServer200ResponseFromJSON,
    GetAllShardsInfoLiteServer200ResponseToJSON,
    GetBlockDefaultResponseFromJSON,
    GetBlockDefaultResponseToJSON,
    GetBlockHeaderLiteServer200ResponseFromJSON,
    GetBlockHeaderLiteServer200ResponseToJSON,
    GetBlockLiteServer200ResponseFromJSON,
    GetBlockLiteServer200ResponseToJSON,
    GetBlockProofLiteServer200ResponseFromJSON,
    GetBlockProofLiteServer200ResponseToJSON,
    GetConfigAllLiteServer200ResponseFromJSON,
    GetConfigAllLiteServer200ResponseToJSON,
    GetListBlockTransactionsLiteServer200ResponseFromJSON,
    GetListBlockTransactionsLiteServer200ResponseToJSON,
    GetMasterchainInfoExtLiteServer200ResponseFromJSON,
    GetMasterchainInfoExtLiteServer200ResponseToJSON,
    GetMasterchainInfoLiteServer200ResponseFromJSON,
    GetMasterchainInfoLiteServer200ResponseToJSON,
    GetShardBlockProofLiteServer200ResponseFromJSON,
    GetShardBlockProofLiteServer200ResponseToJSON,
    GetShardInfoLiteServer200ResponseFromJSON,
    GetShardInfoLiteServer200ResponseToJSON,
    GetStateLiteServer200ResponseFromJSON,
    GetStateLiteServer200ResponseToJSON,
    GetTimeLiteServer200ResponseFromJSON,
    GetTimeLiteServer200ResponseToJSON,
    GetTransactionsLiteServer200ResponseFromJSON,
    GetTransactionsLiteServer200ResponseToJSON,
    SendMessageLiteServer200ResponseFromJSON,
    SendMessageLiteServer200ResponseToJSON,
    SendMessageLiteServerRequestFromJSON,
    SendMessageLiteServerRequestToJSON,
} from '../models/index';

export interface GetAccountStateLiteServerRequest {
    accountId: string;
}

export interface GetAllShardsInfoLiteServerRequest {
    blockId: string;
}

export interface GetBlockHeaderLiteServerRequest {
    blockId: string;
    mode: number;
}

export interface GetBlockLiteServerRequest {
    blockId: string;
}

export interface GetBlockProofLiteServerRequest {
    knownBlock: string;
    mode: number;
    targetBlock?: string;
}

export interface GetConfigAllLiteServerRequest {
    blockId: string;
    mode: number;
}

export interface GetListBlockTransactionsLiteServerRequest {
    blockId: string;
    mode: number;
    count: number;
    accountId?: string;
    lt?: number;
}

export interface GetMasterchainInfoExtLiteServerRequest {
    mode: number;
}

export interface GetShardBlockProofLiteServerRequest {
    blockId: string;
}

export interface GetShardInfoLiteServerRequest {
    blockId: string;
    workchain: number;
    shard: number;
    exact: boolean;
}

export interface GetStateLiteServerRequest {
    blockId: string;
}

export interface GetTransactionsLiteServerRequest {
    accountId: string;
    count: number;
    lt: number;
    hash: string;
}

export interface SendMessageLiteServerOperationRequest {
    sendMessageLiteServerRequest: SendMessageLiteServerRequest;
}

/**
 * LiteServerApi - interface
 * 
 * @export
 * @interface LiteServerApiInterface
 */
export interface LiteServerApiInterface {
    /**
     * Get account state
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getAccountStateLiteServerRaw(requestParameters: GetAccountStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountStateLiteServer200Response>>;

    /**
     * Get account state
     */
    getAccountStateLiteServer(requestParameters: GetAccountStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountStateLiteServer200Response>;

    /**
     * Get all shards info
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getAllShardsInfoLiteServerRaw(requestParameters: GetAllShardsInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllShardsInfoLiteServer200Response>>;

    /**
     * Get all shards info
     */
    getAllShardsInfoLiteServer(requestParameters: GetAllShardsInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllShardsInfoLiteServer200Response>;

    /**
     * Get block header
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {number} mode mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getBlockHeaderLiteServerRaw(requestParameters: GetBlockHeaderLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockHeaderLiteServer200Response>>;

    /**
     * Get block header
     */
    getBlockHeaderLiteServer(requestParameters: GetBlockHeaderLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockHeaderLiteServer200Response>;

    /**
     * Get block
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getBlockLiteServerRaw(requestParameters: GetBlockLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockLiteServer200Response>>;

    /**
     * Get block
     */
    getBlockLiteServer(requestParameters: GetBlockLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockLiteServer200Response>;

    /**
     * Get block proof
     * @param {string} knownBlock known block: (workchain,shard,seqno,root_hash,file_hash)
     * @param {number} mode mode
     * @param {string} [targetBlock] target block: (workchain,shard,seqno,root_hash,file_hash)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getBlockProofLiteServerRaw(requestParameters: GetBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockProofLiteServer200Response>>;

    /**
     * Get block proof
     */
    getBlockProofLiteServer(requestParameters: GetBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockProofLiteServer200Response>;

    /**
     * Get config all
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {number} mode mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getConfigAllLiteServerRaw(requestParameters: GetConfigAllLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetConfigAllLiteServer200Response>>;

    /**
     * Get config all
     */
    getConfigAllLiteServer(requestParameters: GetConfigAllLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetConfigAllLiteServer200Response>;

    /**
     * Get list block transactions
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {number} mode mode
     * @param {number} count count
     * @param {string} [accountId] account ID
     * @param {number} [lt] lt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getListBlockTransactionsLiteServerRaw(requestParameters: GetListBlockTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListBlockTransactionsLiteServer200Response>>;

    /**
     * Get list block transactions
     */
    getListBlockTransactionsLiteServer(requestParameters: GetListBlockTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListBlockTransactionsLiteServer200Response>;

    /**
     * Get masterchain info ext
     * @param {number} mode mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getMasterchainInfoExtLiteServerRaw(requestParameters: GetMasterchainInfoExtLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMasterchainInfoExtLiteServer200Response>>;

    /**
     * Get masterchain info ext
     */
    getMasterchainInfoExtLiteServer(requestParameters: GetMasterchainInfoExtLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMasterchainInfoExtLiteServer200Response>;

    /**
     * Get masterchain info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getMasterchainInfoLiteServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMasterchainInfoLiteServer200Response>>;

    /**
     * Get masterchain info
     */
    getMasterchainInfoLiteServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMasterchainInfoLiteServer200Response>;

    /**
     * Get shard block proof
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getShardBlockProofLiteServerRaw(requestParameters: GetShardBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShardBlockProofLiteServer200Response>>;

    /**
     * Get shard block proof
     */
    getShardBlockProofLiteServer(requestParameters: GetShardBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShardBlockProofLiteServer200Response>;

    /**
     * Get shard info
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {number} workchain workchain
     * @param {number} shard shard
     * @param {boolean} exact exact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getShardInfoLiteServerRaw(requestParameters: GetShardInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShardInfoLiteServer200Response>>;

    /**
     * Get shard info
     */
    getShardInfoLiteServer(requestParameters: GetShardInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShardInfoLiteServer200Response>;

    /**
     * Get block state
     * @param {string} blockId block ID: (workchain,shard,seqno,root_hash,file_hash)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getStateLiteServerRaw(requestParameters: GetStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStateLiteServer200Response>>;

    /**
     * Get block state
     */
    getStateLiteServer(requestParameters: GetStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStateLiteServer200Response>;

    /**
     * Get time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getTimeLiteServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimeLiteServer200Response>>;

    /**
     * Get time
     */
    getTimeLiteServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimeLiteServer200Response>;

    /**
     * Get transactions
     * @param {string} accountId account ID
     * @param {number} count count
     * @param {number} lt lt
     * @param {string} hash hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    getTransactionsLiteServerRaw(requestParameters: GetTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionsLiteServer200Response>>;

    /**
     * Get transactions
     */
    getTransactionsLiteServer(requestParameters: GetTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionsLiteServer200Response>;

    /**
     * Send message
     * @param {SendMessageLiteServerRequest} sendMessageLiteServerRequest Data that is expected
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiteServerApiInterface
     */
    sendMessageLiteServerRaw(requestParameters: SendMessageLiteServerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendMessageLiteServer200Response>>;

    /**
     * Send message
     */
    sendMessageLiteServer(requestParameters: SendMessageLiteServerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendMessageLiteServer200Response>;

}

/**
 * 
 */
export class LiteServerApi extends runtime.BaseAPI implements LiteServerApiInterface {

    /**
     * Get account state
     */
    async getAccountStateLiteServerRaw(requestParameters: GetAccountStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountStateLiteServer200Response>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountStateLiteServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_account_state/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountStateLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get account state
     */
    async getAccountStateLiteServer(requestParameters: GetAccountStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountStateLiteServer200Response> {
        const response = await this.getAccountStateLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all shards info
     */
    async getAllShardsInfoLiteServerRaw(requestParameters: GetAllShardsInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllShardsInfoLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getAllShardsInfoLiteServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_all_shards_info/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllShardsInfoLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all shards info
     */
    async getAllShardsInfoLiteServer(requestParameters: GetAllShardsInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllShardsInfoLiteServer200Response> {
        const response = await this.getAllShardsInfoLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get block header
     */
    async getBlockHeaderLiteServerRaw(requestParameters: GetBlockHeaderLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockHeaderLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getBlockHeaderLiteServer.');
        }

        if (requestParameters.mode === null || requestParameters.mode === undefined) {
            throw new runtime.RequiredError('mode','Required parameter requestParameters.mode was null or undefined when calling getBlockHeaderLiteServer.');
        }

        const queryParameters: any = {};

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_block_header/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockHeaderLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get block header
     */
    async getBlockHeaderLiteServer(requestParameters: GetBlockHeaderLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockHeaderLiteServer200Response> {
        const response = await this.getBlockHeaderLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get block
     */
    async getBlockLiteServerRaw(requestParameters: GetBlockLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getBlockLiteServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_block/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get block
     */
    async getBlockLiteServer(requestParameters: GetBlockLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockLiteServer200Response> {
        const response = await this.getBlockLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get block proof
     */
    async getBlockProofLiteServerRaw(requestParameters: GetBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockProofLiteServer200Response>> {
        if (requestParameters.knownBlock === null || requestParameters.knownBlock === undefined) {
            throw new runtime.RequiredError('knownBlock','Required parameter requestParameters.knownBlock was null or undefined when calling getBlockProofLiteServer.');
        }

        if (requestParameters.mode === null || requestParameters.mode === undefined) {
            throw new runtime.RequiredError('mode','Required parameter requestParameters.mode was null or undefined when calling getBlockProofLiteServer.');
        }

        const queryParameters: any = {};

        if (requestParameters.knownBlock !== undefined) {
            queryParameters['known_block'] = requestParameters.knownBlock;
        }

        if (requestParameters.targetBlock !== undefined) {
            queryParameters['target_block'] = requestParameters.targetBlock;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_block_proof`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockProofLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get block proof
     */
    async getBlockProofLiteServer(requestParameters: GetBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockProofLiteServer200Response> {
        const response = await this.getBlockProofLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get config all
     */
    async getConfigAllLiteServerRaw(requestParameters: GetConfigAllLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetConfigAllLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getConfigAllLiteServer.');
        }

        if (requestParameters.mode === null || requestParameters.mode === undefined) {
            throw new runtime.RequiredError('mode','Required parameter requestParameters.mode was null or undefined when calling getConfigAllLiteServer.');
        }

        const queryParameters: any = {};

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_config_all/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetConfigAllLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get config all
     */
    async getConfigAllLiteServer(requestParameters: GetConfigAllLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetConfigAllLiteServer200Response> {
        const response = await this.getConfigAllLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list block transactions
     */
    async getListBlockTransactionsLiteServerRaw(requestParameters: GetListBlockTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListBlockTransactionsLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getListBlockTransactionsLiteServer.');
        }

        if (requestParameters.mode === null || requestParameters.mode === undefined) {
            throw new runtime.RequiredError('mode','Required parameter requestParameters.mode was null or undefined when calling getListBlockTransactionsLiteServer.');
        }

        if (requestParameters.count === null || requestParameters.count === undefined) {
            throw new runtime.RequiredError('count','Required parameter requestParameters.count was null or undefined when calling getListBlockTransactionsLiteServer.');
        }

        const queryParameters: any = {};

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['account_id'] = requestParameters.accountId;
        }

        if (requestParameters.lt !== undefined) {
            queryParameters['lt'] = requestParameters.lt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/list_block_transactions/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListBlockTransactionsLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get list block transactions
     */
    async getListBlockTransactionsLiteServer(requestParameters: GetListBlockTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListBlockTransactionsLiteServer200Response> {
        const response = await this.getListBlockTransactionsLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get masterchain info ext
     */
    async getMasterchainInfoExtLiteServerRaw(requestParameters: GetMasterchainInfoExtLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMasterchainInfoExtLiteServer200Response>> {
        if (requestParameters.mode === null || requestParameters.mode === undefined) {
            throw new runtime.RequiredError('mode','Required parameter requestParameters.mode was null or undefined when calling getMasterchainInfoExtLiteServer.');
        }

        const queryParameters: any = {};

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_masterchain_info_ext`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMasterchainInfoExtLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get masterchain info ext
     */
    async getMasterchainInfoExtLiteServer(requestParameters: GetMasterchainInfoExtLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMasterchainInfoExtLiteServer200Response> {
        const response = await this.getMasterchainInfoExtLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get masterchain info
     */
    async getMasterchainInfoLiteServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMasterchainInfoLiteServer200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_masterchain_info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMasterchainInfoLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get masterchain info
     */
    async getMasterchainInfoLiteServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMasterchainInfoLiteServer200Response> {
        const response = await this.getMasterchainInfoLiteServerRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get shard block proof
     */
    async getShardBlockProofLiteServerRaw(requestParameters: GetShardBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShardBlockProofLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getShardBlockProofLiteServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_shard_block_proof/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShardBlockProofLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get shard block proof
     */
    async getShardBlockProofLiteServer(requestParameters: GetShardBlockProofLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShardBlockProofLiteServer200Response> {
        const response = await this.getShardBlockProofLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get shard info
     */
    async getShardInfoLiteServerRaw(requestParameters: GetShardInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShardInfoLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getShardInfoLiteServer.');
        }

        if (requestParameters.workchain === null || requestParameters.workchain === undefined) {
            throw new runtime.RequiredError('workchain','Required parameter requestParameters.workchain was null or undefined when calling getShardInfoLiteServer.');
        }

        if (requestParameters.shard === null || requestParameters.shard === undefined) {
            throw new runtime.RequiredError('shard','Required parameter requestParameters.shard was null or undefined when calling getShardInfoLiteServer.');
        }

        if (requestParameters.exact === null || requestParameters.exact === undefined) {
            throw new runtime.RequiredError('exact','Required parameter requestParameters.exact was null or undefined when calling getShardInfoLiteServer.');
        }

        const queryParameters: any = {};

        if (requestParameters.workchain !== undefined) {
            queryParameters['workchain'] = requestParameters.workchain;
        }

        if (requestParameters.shard !== undefined) {
            queryParameters['shard'] = requestParameters.shard;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_shard_info/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShardInfoLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get shard info
     */
    async getShardInfoLiteServer(requestParameters: GetShardInfoLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShardInfoLiteServer200Response> {
        const response = await this.getShardInfoLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get block state
     */
    async getStateLiteServerRaw(requestParameters: GetStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStateLiteServer200Response>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getStateLiteServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_state/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStateLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get block state
     */
    async getStateLiteServer(requestParameters: GetStateLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStateLiteServer200Response> {
        const response = await this.getStateLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get time
     */
    async getTimeLiteServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimeLiteServer200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_time`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTimeLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get time
     */
    async getTimeLiteServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimeLiteServer200Response> {
        const response = await this.getTimeLiteServerRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get transactions
     */
    async getTransactionsLiteServerRaw(requestParameters: GetTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionsLiteServer200Response>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getTransactionsLiteServer.');
        }

        if (requestParameters.count === null || requestParameters.count === undefined) {
            throw new runtime.RequiredError('count','Required parameter requestParameters.count was null or undefined when calling getTransactionsLiteServer.');
        }

        if (requestParameters.lt === null || requestParameters.lt === undefined) {
            throw new runtime.RequiredError('lt','Required parameter requestParameters.lt was null or undefined when calling getTransactionsLiteServer.');
        }

        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getTransactionsLiteServer.');
        }

        const queryParameters: any = {};

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.lt !== undefined) {
            queryParameters['lt'] = requestParameters.lt;
        }

        if (requestParameters.hash !== undefined) {
            queryParameters['hash'] = requestParameters.hash;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/liteserver/get_transactions/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionsLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Get transactions
     */
    async getTransactionsLiteServer(requestParameters: GetTransactionsLiteServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionsLiteServer200Response> {
        const response = await this.getTransactionsLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send message
     */
    async sendMessageLiteServerRaw(requestParameters: SendMessageLiteServerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendMessageLiteServer200Response>> {
        if (requestParameters.sendMessageLiteServerRequest === null || requestParameters.sendMessageLiteServerRequest === undefined) {
            throw new runtime.RequiredError('sendMessageLiteServerRequest','Required parameter requestParameters.sendMessageLiteServerRequest was null or undefined when calling sendMessageLiteServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/liteserver/send_message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageLiteServerRequestToJSON(requestParameters.sendMessageLiteServerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendMessageLiteServer200ResponseFromJSON(jsonValue));
    }

    /**
     * Send message
     */
    async sendMessageLiteServer(requestParameters: SendMessageLiteServerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendMessageLiteServer200Response> {
        const response = await this.sendMessageLiteServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValidatorsSetListInner } from './ValidatorsSetListInner';
import {
    ValidatorsSetListInnerFromJSON,
    ValidatorsSetListInnerFromJSONTyped,
    ValidatorsSetListInnerToJSON,
} from './ValidatorsSetListInner';

/**
 * 
 * @export
 * @interface ValidatorsSet
 */
export interface ValidatorsSet {
    /**
     * 
     * @type {number}
     * @memberof ValidatorsSet
     */
    utimeSince: number;
    /**
     * 
     * @type {number}
     * @memberof ValidatorsSet
     */
    utimeUntil: number;
    /**
     * 
     * @type {number}
     * @memberof ValidatorsSet
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof ValidatorsSet
     */
    main: number;
    /**
     * 
     * @type {number}
     * @memberof ValidatorsSet
     */
    totalWeight?: number;
    /**
     * 
     * @type {Array<ValidatorsSetListInner>}
     * @memberof ValidatorsSet
     */
    list: Array<ValidatorsSetListInner>;
}

/**
 * Check if a given object implements the ValidatorsSet interface.
 */
export function instanceOfValidatorsSet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "utimeSince" in value;
    isInstance = isInstance && "utimeUntil" in value;
    isInstance = isInstance && "total" in value;
    isInstance = isInstance && "main" in value;
    isInstance = isInstance && "list" in value;

    return isInstance;
}

export function ValidatorsSetFromJSON(json: any): ValidatorsSet {
    return ValidatorsSetFromJSONTyped(json, false);
}

export function ValidatorsSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidatorsSet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'utimeSince': json['utime_since'],
        'utimeUntil': json['utime_until'],
        'total': json['total'],
        'main': json['main'],
        'totalWeight': !exists(json, 'total_weight') ? undefined : json['total_weight'],
        'list': ((json['list'] as Array<any>).map(ValidatorsSetListInnerFromJSON)),
    };
}

export function ValidatorsSetToJSON(value?: ValidatorsSet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'utime_since': value.utimeSince,
        'utime_until': value.utimeUntil,
        'total': value.total,
        'main': value.main,
        'total_weight': value.totalWeight,
        'list': ((value.list as Array<any>).map(ValidatorsSetListInnerToJSON)),
    };
}


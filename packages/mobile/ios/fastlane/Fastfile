# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

X_CODE = ENV["X_CODE"]
if X_CODE != ''
  xcode_select("/Applications/Xcode_#{X_CODE}.app")
end

platform :ios do
  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY"],
      duration: 500, # maximum 1200
      is_key_content_base64: false,
      in_house: false # detecting this via ASC private key not currently supported
    )
  end

  desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
  lane :prepare_signing do |options|
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    keychain_name = "login.keychain"
    keychain_password = ENV["SIGNING_KEY_PASSWORD"]

    delete_keychain(
      name: keychain_name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    import_certificate(
      certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
      certificate_password: ENV["SIGNING_KEY_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

    # fetches and installs provisioning profiles from ASC
    sigh(
      adhoc: options[:adhoc],
      api_key: api_key,
      app_identifier: app_identifier,
      readonly: true
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
    #fetch read your app identifier defined in your Appfile
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    current_version = get_version_number(
      xcodeproj: "ton_keeper.xcodeproj"
    )
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )

    updated_version_code = latest_build_number + 1

    increment_build_number(
      build_number: updated_version_code,
    )

    sh("echo VERSION_CODE=#{updated_version_code} >> $GITHUB_ENV")
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

    output_name = "ton_keeper" # specify the name of the .ipa file to generate
    export_method = "app-store" # specify the export method
    appstore_provision_file = "match AppStore " + app_identifier

    # turn off automatic signing during build so correct code signing identity is guaranteed to be used
    update_code_signing_settings(
      path: "ton_keeper.xcodeproj",
      use_automatic_signing: false,
      team_id: team_id,
      targets: ["ton_keeper"],
      code_sign_identity: "iPhone Distribution", # replace with name of code signing identity if different
      bundle_identifier: app_identifier,
      build_configurations: ["Release"] # only toggle code signing settings for Release configurations
    )

    update_project_provisioning(
      xcodeproj: "ton_keeper.xcodeproj",
      profile: "AppStore_" + app_identifier + ".mobileprovision",
      build_configuration: "Release",
      code_signing_identity: "iPhone Distribution"
    )
    
    # build the app
    gym(
      scheme: "ton_keeper", # replace with name of your projectâ€™s scheme
      output_name: output_name,
      configuration: "Release",
      export_method: export_method,
      export_options: {
        provisioningProfiles: {
          app_identifier => appstore_provision_file
        }
      }
    )
  end

  desc "Upload to TestFlight / ASC"
  lane :upload_release do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    deliver(
        api_key: api_key,
        skip_screenshots: true,
        skip_metadata: true,
        skip_app_version_update: true,
        force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
        run_precheck_before_submit: false # not supported through ASC API yet
    )
  end

  desc "Build and upload to TestFlight"
  lane :beta do
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_release
    upload_release
  end
end